@page "/authors/create/"
@attribute [Authorize(Roles = "Administrator")]
@inject IAuthorRepository _repo;
@inject NavigationManager _navManager

<h3 class="card-title">Create new author</h3>
<br />
<hr />
<br />
@if (!isSuccess)
{
   <ErrorMessage Message="Something went wrong with the operation"></ErrorMessage>
}


<EditForm Model="Model" OnInvalidSubmit="CreateAuthor">
   <DataAnnotationsValidator />
   <ValidationSummary />
   <div class="form-group">
      <label for="firstname">First name</label>
      <InputText @bind-Value="Model.Firstname" class="form-control" id="firstname" />
   </div>
   <div class="form-group">
      <label for="lastname">Last name</label>
      <InputText @bind-Value="Model.Lastname" class="form-control" id="lastname" />
   </div>
   <div class="form-group">
      <label for="bio">Biography</label>
      <InputTextArea @bind-Value="Model.Bio" class="form-control" id="bio" />
   </div>
   <button @onclick="CreateAuthor" class="btn btn-primary" type="submit">
      <span class="oi oi-pencil"></span>
      Create author
   </button>
   <button @onclick="BackToList" class="btn btn-outline-secondary">
      <span class="oi oi-media-skip-backward"></span>
      Back to list
   </button>
</EditForm>

@code {
   private Author Model = new Author();
   private bool isSuccess = true;

   private async Task CreateAuthor()
   {
      var isSuccess = await _repo.Create(Endpoints.AuthorsEndpoint, Model);
      if (isSuccess)
      {
         BackToList();
      }
   }
   private void BackToList()
   {
      _navManager.NavigateTo("/authors/");
   }

}
