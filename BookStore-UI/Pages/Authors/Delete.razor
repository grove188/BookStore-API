@page "/authors/delete/{Id}"
@attribute [Authorize(Roles = "Adminstrator")]
@inject IAuthorRepository _repo;
@inject NavigationManager _navManager

<h3 class="card-title">Are you sure you want to delete this record?</h3>
@if (isFailed == true)
{
   <ErrorMessage Message="Something went wrong with the operation"></ErrorMessage>
}
@if (Model == null)
{
   <LoadingMessage Message="Loading author for edit"></LoadingMessage>
}
else
{
   <div class="col-md-4">
      <h4>Author Details</h4>
      <table class="table table-responsive">
         <tr>
            <td>First Name</td>
            <td>@Model.Firstname</td>
         </tr>
         <tr>
            <td>Last Name</td>
            <td>@Model.Lastname</td>
         </tr>
         <tr>
            <td>Biography</td>
            <td>@Model.Bio</td>
         </tr>
      </table>
      <br />
      @if (Model.Books == null || Model.Books.Count < 1)
      {
         <div class="alert alert-dismissible alert-secondary">
            No books for this author
         </div>
      }
      else
      {
         <div class="card" style="width:18rem;">
            <div class="card-header">
               <h4>Author's Books</h4>
            </div>

            <ul class="list-group list-group-flush">
               @foreach (var book in Model.Books)
               {
                  <li class="list-group-item">@book.Title - @book.Price</li>
               }
            </ul>
         </div>
      }

   </div>
}
<br />
<button @onclick="DeleteAuthor" class="btn btn-danger">
   <span class="oi oi-delete"></span>
   Delete author
</button>
<button @onclick="BackToList" class="btn btn-outline-secondary">
   <span class="oi oi-media-skip-backward"></span>
   Back to list
</button>



@code {
   [Parameter]
   public string Id { get; set; }

   private Author Model = new Author();
   private bool isFailed = false;

   protected override async Task OnInitializedAsync()
   {
      int id = int.Parse(Id);
      Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
   }

   private void BackToList()
   {
      _navManager.NavigateTo("/authors/");
   }

   private async Task DeleteAuthor()
   {
      bool isSuccess = await _repo.Delete(Endpoints.AuthorsEndpoint, Model.Id);
      if (isSuccess)
      {
         BackToList();
      }
      else
      {
         isFailed = true;
      }
   }
}
